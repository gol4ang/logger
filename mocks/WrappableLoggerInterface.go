// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import logger "github.com/gol4ng/logger"
import mock "github.com/stretchr/testify/mock"

// WrappableLoggerInterface is an autogenerated mock type for the WrappableLoggerInterface type
type WrappableLoggerInterface struct {
	mock.Mock
}

// Alert provides a mock function with given fields: message, context
func (_m *WrappableLoggerInterface) Alert(message string, context *logger.Context) error {
	ret := _m.Called(message, context)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *logger.Context) error); ok {
		r0 = rf(message, context)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Critical provides a mock function with given fields: message, context
func (_m *WrappableLoggerInterface) Critical(message string, context *logger.Context) error {
	ret := _m.Called(message, context)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *logger.Context) error); ok {
		r0 = rf(message, context)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Debug provides a mock function with given fields: message, context
func (_m *WrappableLoggerInterface) Debug(message string, context *logger.Context) error {
	ret := _m.Called(message, context)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *logger.Context) error); ok {
		r0 = rf(message, context)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Emergency provides a mock function with given fields: message, context
func (_m *WrappableLoggerInterface) Emergency(message string, context *logger.Context) error {
	ret := _m.Called(message, context)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *logger.Context) error); ok {
		r0 = rf(message, context)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Error provides a mock function with given fields: message, context
func (_m *WrappableLoggerInterface) Error(message string, context *logger.Context) error {
	ret := _m.Called(message, context)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *logger.Context) error); ok {
		r0 = rf(message, context)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Info provides a mock function with given fields: message, context
func (_m *WrappableLoggerInterface) Info(message string, context *logger.Context) error {
	ret := _m.Called(message, context)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *logger.Context) error); ok {
		r0 = rf(message, context)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Log provides a mock function with given fields: message, level, context
func (_m *WrappableLoggerInterface) Log(message string, level logger.Level, context *logger.Context) error {
	ret := _m.Called(message, level, context)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, logger.Level, *logger.Context) error); ok {
		r0 = rf(message, level, context)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Notice provides a mock function with given fields: message, context
func (_m *WrappableLoggerInterface) Notice(message string, context *logger.Context) error {
	ret := _m.Called(message, context)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *logger.Context) error); ok {
		r0 = rf(message, context)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Warning provides a mock function with given fields: message, context
func (_m *WrappableLoggerInterface) Warning(message string, context *logger.Context) error {
	ret := _m.Called(message, context)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *logger.Context) error); ok {
		r0 = rf(message, context)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Wrap provides a mock function with given fields: middleware
func (_m *WrappableLoggerInterface) Wrap(middleware logger.MiddlewareInterface) logger.LoggerInterface {
	ret := _m.Called(middleware)

	var r0 logger.LoggerInterface
	if rf, ok := ret.Get(0).(func(logger.MiddlewareInterface) logger.LoggerInterface); ok {
		r0 = rf(middleware)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(logger.LoggerInterface)
		}
	}

	return r0
}

// WrapNew provides a mock function with given fields: middleware
func (_m *WrappableLoggerInterface) WrapNew(middleware logger.MiddlewareInterface) logger.LoggerInterface {
	ret := _m.Called(middleware)

	var r0 logger.LoggerInterface
	if rf, ok := ret.Get(0).(func(logger.MiddlewareInterface) logger.LoggerInterface); ok {
		r0 = rf(middleware)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(logger.LoggerInterface)
		}
	}

	return r0
}
