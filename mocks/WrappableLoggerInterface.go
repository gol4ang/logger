// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import logger "github.com/gol4ng/logger"
import mock "github.com/stretchr/testify/mock"

// WrappableLoggerInterface is an autogenerated mock type for the WrappableLoggerInterface type
type WrappableLoggerInterface struct {
	mock.Mock
}

// Alert provides a mock function with given fields: message, field
func (_m *WrappableLoggerInterface) Alert(message string, field ...logger.Field) {
	_va := make([]interface{}, len(field))
	for _i := range field {
		_va[_i] = field[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, message)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// Critical provides a mock function with given fields: message, field
func (_m *WrappableLoggerInterface) Critical(message string, field ...logger.Field) {
	_va := make([]interface{}, len(field))
	for _i := range field {
		_va[_i] = field[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, message)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// Debug provides a mock function with given fields: message, field
func (_m *WrappableLoggerInterface) Debug(message string, field ...logger.Field) {
	_va := make([]interface{}, len(field))
	for _i := range field {
		_va[_i] = field[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, message)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// Emergency provides a mock function with given fields: message, field
func (_m *WrappableLoggerInterface) Emergency(message string, field ...logger.Field) {
	_va := make([]interface{}, len(field))
	for _i := range field {
		_va[_i] = field[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, message)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// Error provides a mock function with given fields: message, field
func (_m *WrappableLoggerInterface) Error(message string, field ...logger.Field) {
	_va := make([]interface{}, len(field))
	for _i := range field {
		_va[_i] = field[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, message)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// Info provides a mock function with given fields: message, field
func (_m *WrappableLoggerInterface) Info(message string, field ...logger.Field) {
	_va := make([]interface{}, len(field))
	for _i := range field {
		_va[_i] = field[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, message)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// Log provides a mock function with given fields: message, level, field
func (_m *WrappableLoggerInterface) Log(message string, level logger.Level, field ...logger.Field) {
	_va := make([]interface{}, len(field))
	for _i := range field {
		_va[_i] = field[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, message, level)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// Notice provides a mock function with given fields: message, field
func (_m *WrappableLoggerInterface) Notice(message string, field ...logger.Field) {
	_va := make([]interface{}, len(field))
	for _i := range field {
		_va[_i] = field[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, message)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// Warning provides a mock function with given fields: message, field
func (_m *WrappableLoggerInterface) Warning(message string, field ...logger.Field) {
	_va := make([]interface{}, len(field))
	for _i := range field {
		_va[_i] = field[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, message)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// Wrap provides a mock function with given fields: middlewares
func (_m *WrappableLoggerInterface) Wrap(middlewares ...logger.MiddlewareInterface) logger.LoggerInterface {
	_va := make([]interface{}, len(middlewares))
	for _i := range middlewares {
		_va[_i] = middlewares[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 logger.LoggerInterface
	if rf, ok := ret.Get(0).(func(...logger.MiddlewareInterface) logger.LoggerInterface); ok {
		r0 = rf(middlewares...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(logger.LoggerInterface)
		}
	}

	return r0
}

// WrapNew provides a mock function with given fields: middlewares
func (_m *WrappableLoggerInterface) WrapNew(middlewares ...logger.MiddlewareInterface) logger.LoggerInterface {
	_va := make([]interface{}, len(middlewares))
	for _i := range middlewares {
		_va[_i] = middlewares[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 logger.LoggerInterface
	if rf, ok := ret.Get(0).(func(...logger.MiddlewareInterface) logger.LoggerInterface); ok {
		r0 = rf(middlewares...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(logger.LoggerInterface)
		}
	}

	return r0
}
