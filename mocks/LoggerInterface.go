// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import logger "github.com/gol4ng/logger"
import mock "github.com/stretchr/testify/mock"

// LoggerInterface is an autogenerated mock type for the LoggerInterface type
type LoggerInterface struct {
	mock.Mock
}

// Alert provides a mock function with given fields: message, context
func (_m *LoggerInterface) Alert(message string, context *logger.Context) error {
	ret := _m.Called(message, context)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *logger.Context) error); ok {
		r0 = rf(message, context)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Critical provides a mock function with given fields: message, context
func (_m *LoggerInterface) Critical(message string, context *logger.Context) error {
	ret := _m.Called(message, context)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *logger.Context) error); ok {
		r0 = rf(message, context)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Debug provides a mock function with given fields: message, context
func (_m *LoggerInterface) Debug(message string, context *logger.Context) error {
	ret := _m.Called(message, context)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *logger.Context) error); ok {
		r0 = rf(message, context)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Emergency provides a mock function with given fields: message, context
func (_m *LoggerInterface) Emergency(message string, context *logger.Context) error {
	ret := _m.Called(message, context)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *logger.Context) error); ok {
		r0 = rf(message, context)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Error provides a mock function with given fields: message, context
func (_m *LoggerInterface) Error(message string, context *logger.Context) error {
	ret := _m.Called(message, context)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *logger.Context) error); ok {
		r0 = rf(message, context)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Info provides a mock function with given fields: message, context
func (_m *LoggerInterface) Info(message string, context *logger.Context) error {
	ret := _m.Called(message, context)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *logger.Context) error); ok {
		r0 = rf(message, context)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Log provides a mock function with given fields: message, level, context
func (_m *LoggerInterface) Log(message string, level logger.Level, context *logger.Context) error {
	ret := _m.Called(message, level, context)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, logger.Level, *logger.Context) error); ok {
		r0 = rf(message, level, context)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Notice provides a mock function with given fields: message, context
func (_m *LoggerInterface) Notice(message string, context *logger.Context) error {
	ret := _m.Called(message, context)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *logger.Context) error); ok {
		r0 = rf(message, context)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Warning provides a mock function with given fields: message, context
func (_m *LoggerInterface) Warning(message string, context *logger.Context) error {
	ret := _m.Called(message, context)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *logger.Context) error); ok {
		r0 = rf(message, context)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
